/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>
 
#define CMK 0
#define SYM 1
#define NUM 2
#define FUN 3
#define NAV 4

&caps_word {
   continue-list = <UNDERSCORE MINUS BACKSPACE>;
};


/ {

    behaviors {
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_wf_tab {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // W + F
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };
        combo_uy_del {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // U + Y
            key-positions = <7 8>;
            bindings = <&kp DEL>;
        };
        combo_gm_capsword {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <100>;
            // G + M
            key-positions = <14 15>;
            bindings = <&caps_word>;
        };
        combo_xc_ctrl {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // Z + X
            key-positions = <21 22>;
            bindings = <&sk LCTL>;
        };
        combo_commadot_shift {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // , + . = shift
            key-positions = <27 28>;
            bindings = <&skq LSHFT>;
        };
        combo_cmd {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // SYM + SPC = CMD
            key-positions = <30 31>;
            bindings = <&sk LCMD>;
        };
        combo_opt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // NUM + ENT = OPT
            key-positions = <32 33>;
            bindings = <&sk LALT>;
        };
        combo_opt_alt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&sk LALT>;
        };
        combo_cmd_alt {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <50>;
            // NUM + ENT = OPT
            key-positions = <2 3>;
            bindings = <&sk LCMD>;
        };
        combo_ent {
            layers = <0 1 2 3 4 5>;
            timeout-ms = <80>;
            // SPC + BSPC = ENT
            key-positions = <31 32>;
            bindings = <&kp RET>;
        };
    };
};



/ {
        keymap {
                compatible = "zmk,keymap";
                colemak_layer {
// ---------------------------------------------------------------------------
// |     |  Q  |  W  |  F  |  P  |  B  | |  J  |  L  |  U  |  Y  |  '  |     |
// |     |  A  |  R  |  S  |  T  |  G  | |  M  |  N  |  E  |  I  |  O  |     |
// |     |  Z  |  X  |  C  |  D  |  V  | |  K  |  H  |  ,  |  .  |  ?  |     |
//                   |     |-SYM-| SPC | | BSPC |-NUM-|     |
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B &kp J &kp L   &kp U     &kp Y   &kp SQT
   &kp A &kp R &kp S &kp T &kp G &kp M &kp N   &kp E     &kp I   &kp O    
   &kp Z &kp X &kp C &kp D &kp V &kp K &kp H   &kp COMMA &kp DOT &mo FUN  
            &mo SYM &kp SPACE &lt NAV BSPC &mo NUM 
                        >;
                };
                symbol_layer {
// ---------------------------------------------------------------------------
// |     |     |  \  |  %  |  $  |     | |     |  ^  |  [  |  ]  |     |     |
// |     |  *  |  (  |  )  |  :  |     | |     |  ;  |  {  |  }  |     |     |
// |     |     |  `  |  @  |  &  |     | |     |  #  |  <  |  >  |     |     |
//                   |     |_SYM_| SPACE | | BSPC | ESC |     |
                        bindings = <
   &none    &kp BSLH  &kp PRCNT &kp DLLR  &none &none &kp CARET &kp LBKT &kp RBKT &none  
   &kp STAR &kp LPAR  &kp RPAR  &kp COLON &none &none &kp SEMI  &kp LBRC &kp RBRC &none   
   &none    &kp GRAVE &kp AT    &kp AMPS  &none &none &kp HASH  &kp LT   &kp GT   &none    
                             &trans &kp SPACE &kp BSPC &kp ESC 
                        >;
                };
                number_layer {
// ---------------------------------------------------------------------------
// |     |     |  4  |  5  |  6  |     | |     |  |  |  -  |  /  |     |     |
// |     |  .  |  1  |  2  |  3  |     | |     |  "  |  _  |  =  |-NAV-|     |
// |     |  ~  |  7  |  8  |  9  |     | |     |  +  |  ?  |  !  | DEL |     |
//                   |     |  0  | SPC | | RET |_NUM_|     |
                        bindings = <
   &none     &kp N4 &kp N5 &kp N6 &none &none &kp PIPE &kp MINUS &kp FSLH  &none 
   &kp DOT   &kp N1 &kp N2 &kp N3 &none &none &kp DQT  &kp UNDER &kp EQUAL &mo NAV 
   &kp TILDE &kp N7 &kp N8 &kp N9 &none &none &kp PLUS &kp QMARK  &kp EXCL &kp DEL
                 &kp N0 &kp SPACE &kp BSPC  &trans 
                        >;
                };
                fun_layer {
// ---------------------------------------------------------------------------
// |     |     | F 6 | F 5 | F 4 | F10 | | BT0 | BT1 | USB | BLE |BTCLR|     |
// |     |CAPSL| F 3 | F 2 | F 1 | F11 | |VMUTE|VOLDN|VOLUP|BRIDN|BRIUP|     |
// |     |_FUN_| F 9 | F 8 | F 7 | F12 | |     |     |     |     |     |     |
//                   |     |_SYM_| SPC | | BSPC|     |     |
                        bindings = <
   &none    &kp F4 &kp F5 &kp F6 &kp F10    &bt BT_SEL 0 &bt BT_SEL 1  &out OUT_USB &out OUT_BLE &bt BT_CLR   
   &kp CAPS &kp F1 &kp F2 &kp F3 &kp F11    &kp K_MUTE   &kp C_VOL_DN  &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP 
   &trans   &kp F7 &kp F8 &kp F9 &kp F12    &none        &none         &none        &none        &none      
                         &trans &trans &trans &trans 
                        >;
                };
                nav_layer {
// ---------------------------------------------------------------------------
// |     |     |     |     |     |     | |     |     |     |     |     |     |
// |     |     |     |     |     |     | | LFT | DWN | U P |RIGHT|_NAV_|     |
// |     |     |     |     |     |     | | HOM |PG_DN|PG_UP| END |     |     |
//                   |     |     | SPC | | BSPC |_NUM_|    |
                        bindings = <
   &none &none &mmv MOVE_UP &none &none                       &mkp MB1 &mkp MB2  &mkp MB3  &mwh SCROLL_UP &mwh SCROLL_DOWN
   &none &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none  &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans  
   &none &none &none &none &none                              &kp HOME &kp PG_DN &kp PG_UP &kp END   &none 
                         &none &trans &trans &trans 
                        >;
                };
        };
};
